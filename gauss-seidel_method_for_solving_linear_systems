'''
Your task is to implement the Gauss-Seidel method, an iterative technique for solving a system of linear equations (Ax = b).

The function should iteratively update the solution vector (x) by using the most recent values available during the iteration process.

Write a function gauss_seidel(A, b, n, x_ini=None) where:

A is a square matrix of coefficients,
b is the right-hand side vector,
n is the number of iterations,
x_ini is an optional initial guess for (x) (if not provided, assume a vector of zeros).
The function should return the approximated solution vector (x) after performing the specified number of iterations.



'''

import numpy as np

def gauss_seidel(A, b, n, x_ini=None):
	
    x_guess = x_ini or np.zeros_like(b)

    row,col = A.shape

    for _ in range(n):

        for i in range(row):
            sum_n = b[i]
            for j in range(col):
                if j != i:
                    sum_n -= A[i,j] * x_guess[j] 
            x_guess[i] =  sum_n / A[i,i]   

    return x_guess


A = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=float) b = np.array([4, 7, 3], dtype=float) n = 5 print(gauss_seidel(A, b, n))
A = np.array([[4, -1, 0, 1], [-1, 4, -1, 0], [0, -1, 4, -1], [1, 0, -1, 4]], dtype=float) b = np.array([15, 10, 10, 15], dtype=float) n = 1 print(gauss_seidel(A, b, n))
A = np.array([[10, -1, 2], [-1, 11, -1], [2, -1, 10]], dtype=float) b = np.array([6, 25, -11], dtype=float) n = 100 print(gauss_seidel(A, b, n))
    
    
